"""initial

Revision ID: 0bf5b5d68a9e
Revises: None
Create Date: 2016-04-10 18:45:14.609391

"""

# revision identifiers, used by Alembic.
revision = '0bf5b5d68a9e'
down_revision = None

from alembic import op
import sqlalchemy as sa


def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.create_table('bank_account',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('sort_code', sa.String(), nullable=False),
    sa.Column('acct_id', sa.String(), nullable=False),
    sa.Column('currency', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_bank_account'))
    )
    with op.batch_alter_table('bank_account', schema=None) as batch_op:
        batch_op.create_index('ix_bank_account_sort_code_acct_id', ['sort_code', 'acct_id'], unique=True)

    op.create_table('category',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_category'))
    )
    op.create_table('feature_flag',
    sa.Column('feature', sa.String(), nullable=False),
    sa.Column('enabled', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('feature', name=op.f('pk_feature_flag'))
    )
    op.create_table('permission',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_permission'))
    )
    with op.batch_alter_table('permission', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_permission_name'), ['name'], unique=True)

    op.create_table('proposal_version',
    sa.Column('id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.Integer(), autoincrement=False, nullable=True),
    sa.Column('created', sa.DateTime(), autoincrement=False, nullable=True),
    sa.Column('state', sa.String(), autoincrement=False, nullable=True),
    sa.Column('type', sa.String(), autoincrement=False, nullable=True),
    sa.Column('title', sa.String(), autoincrement=False, nullable=True),
    sa.Column('description', sa.String(), autoincrement=False, nullable=True),
    sa.Column('requirements', sa.String(), autoincrement=False, nullable=True),
    sa.Column('length', sa.String(), autoincrement=False, nullable=True),
    sa.Column('notice_required', sa.String(), autoincrement=False, nullable=True),
    sa.Column('needs_help', sa.Boolean(), autoincrement=False, nullable=True),
    sa.Column('needs_money', sa.Boolean(), autoincrement=False, nullable=True),
    sa.Column('one_day', sa.Boolean(), autoincrement=False, nullable=True),
    sa.Column('attendees', sa.String(), autoincrement=False, nullable=True),
    sa.Column('cost', sa.String(), autoincrement=False, nullable=True),
    sa.Column('size', sa.String(), autoincrement=False, nullable=True),
    sa.Column('funds', sa.String(), autoincrement=False, nullable=True),
    sa.Column('transaction_id', sa.BigInteger(), autoincrement=False, nullable=False),
    sa.Column('operation_type', sa.SmallInteger(), nullable=False),
    sa.PrimaryKeyConstraint('id', 'transaction_id', name=op.f('pk_proposal_version'))
    )
    with op.batch_alter_table('proposal_version', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_proposal_version_operation_type'), ['operation_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_proposal_version_transaction_id'), ['transaction_id'], unique=False)

    op.create_table('ticket_type',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('order', sa.Integer(), nullable=False),
    sa.Column('admits', sa.String(), nullable=False),
    sa.Column('type_limit', sa.Integer(), nullable=False),
    sa.Column('personal_limit', sa.Integer(), nullable=False),
    sa.Column('has_badge', sa.Boolean(), nullable=False),
    sa.Column('is_transferable', sa.Boolean(), nullable=False),
    sa.Column('expires', sa.DateTime(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('discount_token', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_ticket_type'))
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('phone', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user'))
    )
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_user_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_user_name'), ['name'], unique=False)

    op.create_table('diversity',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('age', sa.String(), nullable=True),
    sa.Column('gender', sa.String(), nullable=True),
    sa.Column('ethnicity', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_diversity_user_id_user')),
    sa.PrimaryKeyConstraint('user_id', name=op.f('pk_diversity'))
    )
    op.create_table('payment',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('provider', sa.String(), nullable=False),
    sa.Column('currency', sa.String(), nullable=False),
    sa.Column('amount_int', sa.Integer(), nullable=False),
    sa.Column('state', sa.String(), nullable=False),
    sa.Column('reminder_sent', sa.Boolean(), nullable=False),
    sa.Column('bankref', sa.String(), nullable=True),
    sa.Column('gcid', sa.String(), nullable=True),
    sa.Column('chargeid', sa.String(), nullable=True),
    sa.Column('token', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_payment_user_id_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_payment')),
    sa.UniqueConstraint('bankref', name=op.f('uq_payment_bankref')),
    sa.UniqueConstraint('chargeid', name=op.f('uq_payment_chargeid')),
    sa.UniqueConstraint('gcid', name=op.f('uq_payment_gcid'))
    )
    op.create_table('proposal',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('created', sa.DateTime(), nullable=True),
    sa.Column('state', sa.String(), nullable=False),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.Column('requirements', sa.String(), nullable=True),
    sa.Column('length', sa.String(), nullable=True),
    sa.Column('notice_required', sa.String(), nullable=True),
    sa.Column('needs_help', sa.Boolean(), nullable=True),
    sa.Column('needs_money', sa.Boolean(), nullable=True),
    sa.Column('one_day', sa.Boolean(), nullable=True),
    sa.Column('attendees', sa.String(), nullable=True),
    sa.Column('cost', sa.String(), nullable=True),
    sa.Column('size', sa.String(), nullable=True),
    sa.Column('funds', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_proposal_user_id_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_proposal'))
    )
    op.create_table('ticket_price',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('code', sa.Integer(), nullable=False),
    sa.Column('currency', sa.String(), nullable=False),
    sa.Column('price_int', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['code'], ['ticket_type.id'], name=op.f('fk_ticket_price_code_ticket_type')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_ticket_price'))
    )
    op.create_table('transaction',
    sa.Column('issued_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('remote_addr', sa.String(length=50), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_transaction_user_id_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_transaction'))
    )
    with op.batch_alter_table('transaction', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_transaction_user_id'), ['user_id'], unique=False)

    op.create_table('user_permission',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('permission_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['permission_id'], [u'permission.id'], name=op.f('fk_user_permission_permission_id_permission')),
    sa.ForeignKeyConstraint(['user_id'], [u'user.id'], name=op.f('fk_user_permission_user_id_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_permission'))
    )
    with op.batch_alter_table('user_permission', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_user_permission_user_id'), ['user_id'], unique=False)

    op.create_table('bank_transaction',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('account_id', sa.Integer(), nullable=False),
    sa.Column('posted', sa.DateTime(), nullable=False),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('amount_int', sa.Integer(), nullable=False),
    sa.Column('fit_id', sa.String(), nullable=True),
    sa.Column('payee', sa.String(), nullable=False),
    sa.Column('payment_id', sa.Integer(), nullable=True),
    sa.Column('suppressed', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['account_id'], [u'bank_account.id'], name=op.f('fk_bank_transaction_account_id_bank_account')),
    sa.ForeignKeyConstraint(['payment_id'], ['payment.id'], name=op.f('fk_bank_transaction_payment_id_payment')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_bank_transaction'))
    )
    with op.batch_alter_table('bank_transaction', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_bank_transaction_fit_id'), ['fit_id'], unique=False)
        batch_op.create_index('ix_bank_transaction_u1', ['account_id', 'posted', 'type', 'amount_int', 'payee', 'fit_id'], unique=True)

    op.create_table('payment_change',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('payment_id', sa.Integer(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('state', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['payment_id'], ['payment.id'], name=op.f('fk_payment_change_payment_id_payment')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_payment_change'))
    )
    op.create_table('ticket',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('type_id', sa.Integer(), nullable=False),
    sa.Column('paid', sa.Boolean(), nullable=False),
    sa.Column('expires', sa.DateTime(), nullable=False),
    sa.Column('receipt', sa.String(), nullable=True),
    sa.Column('qrcode', sa.String(), nullable=True),
    sa.Column('emailed', sa.Boolean(), nullable=False),
    sa.Column('payment_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['payment_id'], ['payment.id'], name=op.f('fk_ticket_payment_id_payment')),
    sa.ForeignKeyConstraint(['type_id'], ['ticket_type.id'], name=op.f('fk_ticket_type_id_ticket_type')),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_ticket_user_id_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_ticket')),
    sa.UniqueConstraint('qrcode', name=op.f('uq_ticket_qrcode')),
    sa.UniqueConstraint('receipt', name=op.f('uq_ticket_receipt'))
    )
    with op.batch_alter_table('ticket', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_ticket_paid'), ['paid'], unique=False)
        batch_op.create_index(batch_op.f('ix_ticket_type_id'), ['type_id'], unique=False)

    op.create_table('ticket_attrib',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ticket_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('value', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['ticket_id'], ['ticket.id'], name=op.f('fk_ticket_attrib_ticket_id_ticket')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_ticket_attrib'))
    )
    op.create_table('ticket_checkin',
    sa.Column('ticket_id', sa.Integer(), nullable=False),
    sa.Column('checked_in', sa.Boolean(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('badged_up', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['ticket_id'], [u'ticket.id'], name=op.f('fk_ticket_checkin_ticket_id_ticket')),
    sa.PrimaryKeyConstraint('ticket_id', name=op.f('pk_ticket_checkin'))
    )
    op.create_table('ticket_transfer',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ticket_id', sa.Integer(), nullable=False),
    sa.Column('to_user_id', sa.Integer(), nullable=False),
    sa.Column('from_user_id', sa.Integer(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['from_user_id'], ['user.id'], name=op.f('fk_ticket_transfer_from_user_id_user')),
    sa.ForeignKeyConstraint(['ticket_id'], ['ticket.id'], name=op.f('fk_ticket_transfer_ticket_id_ticket')),
    sa.ForeignKeyConstraint(['to_user_id'], ['user.id'], name=op.f('fk_ticket_transfer_to_user_id_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_ticket_transfer'))
    )
    ### end Alembic commands ###


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('ticket_transfer')
    op.drop_table('ticket_checkin')
    op.drop_table('ticket_attrib')
    with op.batch_alter_table('ticket', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_ticket_type_id'))
        batch_op.drop_index(batch_op.f('ix_ticket_paid'))

    op.drop_table('ticket')
    op.drop_table('payment_change')
    with op.batch_alter_table('bank_transaction', schema=None) as batch_op:
        batch_op.drop_index('ix_bank_transaction_u1')
        batch_op.drop_index(batch_op.f('ix_bank_transaction_fit_id'))

    op.drop_table('bank_transaction')
    with op.batch_alter_table('user_permission', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_permission_user_id'))

    op.drop_table('user_permission')
    with op.batch_alter_table('transaction', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_transaction_user_id'))

    op.drop_table('transaction')
    op.drop_table('ticket_price')
    op.drop_table('proposal')
    op.drop_table('payment')
    op.drop_table('diversity')
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_name'))
        batch_op.drop_index(batch_op.f('ix_user_email'))

    op.drop_table('user')
    op.drop_table('ticket_type')
    with op.batch_alter_table('proposal_version', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_proposal_version_transaction_id'))
        batch_op.drop_index(batch_op.f('ix_proposal_version_operation_type'))

    op.drop_table('proposal_version')
    with op.batch_alter_table('permission', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_permission_name'))

    op.drop_table('permission')
    op.drop_table('feature_flag')
    op.drop_table('category')
    with op.batch_alter_table('bank_account', schema=None) as batch_op:
        batch_op.drop_index('ix_bank_account_sort_code_acct_id')

    op.drop_table('bank_account')
    ### end Alembic commands ###
